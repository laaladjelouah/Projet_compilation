
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 19 18:16:06 CET 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import types.*;
import expressions.*;
import instructions.*;
import semantic.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 19 18:16:06 CET 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\044\004\000\002\044" +
    "\003\000\002\036\005\000\002\042\005\000\002\042\007" +
    "\000\002\042\005\000\002\042\003\000\002\042\006\000" +
    "\002\042\005\000\002\042\004\000\002\042\006\000\002" +
    "\042\004\000\002\042\003\000\002\040\003\000\002\040" +
    "\003\000\002\046\002\000\002\047\002\000\002\043\007" +
    "\000\002\043\004\000\002\012\007\000\002\012\011\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\007\003\000\002\007" +
    "\005\000\002\005\003\000\002\005\005\000\002\006\003" +
    "\000\002\006\005\000\002\013\003\000\002\013\005\000" +
    "\002\011\003\000\002\011\005\000\002\004\003\000\002" +
    "\004\005\000\002\045\006\000\002\020\006\000\002\021" +
    "\004\000\002\021\003\000\002\015\006\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\017\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\004\000\002" +
    "\035\003\000\002\035\003\000\002\034\003\000\002\034" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\041\006\000\002\041\005\000" +
    "\002\050\002\000\002\051\002\000\002\024\016\000\002" +
    "\024\011\000\002\052\002\000\002\053\002\000\002\010" +
    "\014\000\002\010\007\000\002\023\003\000\002\023\005" +
    "\000\002\022\005\000\002\025\007\000\002\002\003\000" +
    "\002\002\003\000\002\026\002\000\002\054\002\000\002" +
    "\026\005\000\002\055\002\000\002\026\005\000\002\026" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\014\002\uff9c\035\uff9c\036\uff9c\052\006\066" +
    "\uff9c\001\002\000\012\002\uff9d\035\uff9b\036\uff99\066\014" +
    "\001\002\000\004\002\303\001\002\000\004\066\010\001" +
    "\002\000\004\002\uff9e\001\002\000\004\006\011\001\002" +
    "\000\012\007\uff9c\035\uff9c\036\uff9c\066\uff9c\001\002\000" +
    "\012\007\013\035\uff9b\036\uff99\066\014\001\002\000\004" +
    "\002\uff9f\001\002\000\004\060\211\001\002\000\014\002" +
    "\uff97\007\uff97\035\uff97\036\uff97\066\uff97\001\002\000\004" +
    "\036\267\001\002\000\004\035\020\001\002\000\004\066" +
    "\022\001\002\000\014\002\uff9a\007\uff9a\035\uff9a\036\uff9a" +
    "\066\uff9a\001\002\000\004\004\023\001\002\000\006\005" +
    "\025\066\uffaa\001\002\000\004\066\250\001\002\000\004" +
    "\060\026\001\002\000\016\012\031\013\027\014\035\015" +
    "\030\016\033\017\036\001\002\000\012\005\uffd0\006\uffd0" +
    "\020\uffd0\062\uffd0\001\002\000\012\005\uffcd\006\uffcd\020" +
    "\uffcd\062\uffcd\001\002\000\022\012\031\013\027\014\035" +
    "\015\030\016\033\017\036\027\214\065\215\001\002\000" +
    "\012\005\uffcc\006\uffcc\020\uffcc\062\uffcc\001\002\000\012" +
    "\005\uffce\006\uffce\020\uffce\062\uffce\001\002\000\004\006" +
    "\040\001\002\000\012\005\uffcf\006\uffcf\020\uffcf\062\uffcf" +
    "\001\002\000\012\005\uffd1\006\uffd1\020\uffd1\062\uffd1\001" +
    "\002\000\014\002\uffa7\007\uffa7\035\uffa7\036\uffa7\066\uffa7" +
    "\001\002\000\020\007\041\030\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\037\ufff1\066\ufff1\001\002\000\030\002\uffee\007\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\066\uffee\001\002\000\016\030\051\032\044" +
    "\033\054\034\045\037\055\066\052\001\002\000\020\007" +
    "\uffff\030\uffff\032\uffff\033\uffff\034\uffff\037\uffff\066\uffff" +
    "\001\002\000\004\004\104\001\002\000\004\006\040\001" +
    "\002\000\020\007\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\037\ufff4\066\ufff4\001\002\000\020\007\ufff0\030\051\032" +
    "\044\033\054\034\045\037\055\066\052\001\002\000\020" +
    "\007\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\037\ufffa\066" +
    "\ufffa\001\002\000\004\004\104\001\002\000\012\004\145" +
    "\020\ufff3\056\ufff3\060\211\001\002\000\044\005\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\053\ufff2\054" +
    "\ufff2\056\ufff2\062\ufff2\001\002\000\004\066\155\001\002" +
    "\000\032\004\104\020\152\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\006\020\057\056\060\001\002\000\020\007" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5\066\ufff5" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\042\005\uffcb\020\uffcb\021\uffcb\022\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\053\uffcb\054\uffcb\062\uffcb\001\002\000" +
    "\042\005\uffc6\020\uffc6\021\uffc6\022\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\053\uffc6\054\uffc6\062\uffc6\001\002\000\042\005\uffca" +
    "\020\uffca\021\uffca\022\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\053\uffca" +
    "\054\uffca\062\uffca\001\002\000\042\005\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\053\uffb0\054\uffb0\062" +
    "\uffb0\001\002\000\042\005\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5\062\uffc5\001\002" +
    "\000\030\004\104\024\067\025\077\026\103\040\076\055" +
    "\066\063\102\064\064\066\070\067\073\070\071\001\002" +
    "\000\044\005\uffb4\011\uffb4\020\uffb4\021\uffb4\022\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\053\uffb4\054\uffb4\062\uffb4\001\002\000" +
    "\044\004\145\005\ufff3\020\ufff3\021\ufff3\022\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\050\ufff3\053\ufff3\054\ufff3\062\ufff3\001\002\000\042" +
    "\005\uffae\020\uffae\021\uffae\022\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\053\uffae\054\uffae\062\uffae\001\002\000\042\005\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\053\uffc8\054" +
    "\uffc8\062\uffc8\001\002\000\042\005\uffad\020\uffad\021\uffad" +
    "\022\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\053\uffad\054\uffad\062\uffad" +
    "\001\002\000\040\020\144\021\115\022\112\040\106\041" +
    "\117\042\110\043\121\044\107\045\113\046\122\047\116" +
    "\050\111\053\124\054\114\062\120\001\002\000\042\005" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\053" +
    "\uffc9\054\uffc9\062\uffc9\001\002\000\030\004\104\024\067" +
    "\025\077\026\103\040\076\055\066\063\102\064\064\066" +
    "\070\067\073\070\071\001\002\000\044\005\uffb3\011\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\053\uffb3" +
    "\054\uffb3\062\uffb3\001\002\000\042\005\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\053\uffc7\054\uffc7\062" +
    "\uffc7\001\002\000\042\005\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\053\uffb2\054\uffb2\062\uffb2\001\002" +
    "\000\042\005\uffaf\020\uffaf\021\uffaf\022\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\053\uffaf\054\uffaf\062\uffaf\001\002\000\042\005" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\053" +
    "\uffb1\054\uffb1\062\uffb1\001\002\000\030\004\104\024\067" +
    "\025\077\026\103\040\076\055\066\063\102\064\064\066" +
    "\070\067\073\070\071\001\002\000\040\005\123\021\115" +
    "\022\112\040\106\041\117\042\110\043\121\044\107\045" +
    "\113\046\122\047\116\050\111\053\124\054\114\062\120" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\062\005\ufffe\006\ufffe\007\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\053\ufffe\054\ufffe\062\ufffe\066\ufffe" +
    "\001\002\000\030\004\104\024\067\025\077\026\103\040" +
    "\076\055\066\063\102\064\064\066\070\067\073\070\071" +
    "\001\002\000\042\005\uffbc\020\uffbc\021\115\022\112\040" +
    "\106\041\117\042\110\043\121\044\107\045\113\046\122" +
    "\047\116\050\111\053\uffbc\054\114\062\uffbc\001\002\000" +
    "\042\005\uffbe\020\uffbe\021\115\022\112\040\106\041\117" +
    "\042\110\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\053\uffbe\054\uffbe\062\uffbe\001\002\000\042\005\uffc2" +
    "\020\uffc2\021\115\022\112\040\106\041\117\042\110\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\053\uffc2" +
    "\054\uffc2\062\uffc2\001\002\000\042\005\uffc4\020\uffc4\021" +
    "\115\022\112\040\106\041\117\042\110\043\121\044\107" +
    "\045\113\046\122\047\116\050\111\053\124\054\114\062" +
    "\uffc4\001\002\000\042\005\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\053\uffb8\054\uffb8\062\uffb8\001\002" +
    "\000\042\005\uffc3\020\uffc3\021\115\022\112\040\106\041" +
    "\117\042\110\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\053\uffc3\054\uffc3\062\uffc3\001\002\000\042\005" +
    "\uffba\020\uffba\021\uffba\022\112\040\uffba\041\117\042\110" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\053" +
    "\uffba\054\uffba\062\uffba\001\002\000\042\005\uffbd\020\uffbd" +
    "\021\115\022\112\040\106\041\117\042\110\043\121\044" +
    "\107\045\113\046\122\047\116\050\111\053\uffbd\054\uffbd" +
    "\062\uffbd\001\002\000\042\005\uffbf\020\uffbf\021\115\022" +
    "\112\040\106\041\117\042\110\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\053\uffbf\054\uffbf\062\uffbf\001" +
    "\002\000\042\005\uffb7\020\uffb7\021\uffb7\022\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\053\uffb7\054\uffb7\062\uffb7\001\002\000\042" +
    "\005\uffc1\020\uffc1\021\115\022\112\040\106\041\117\042" +
    "\110\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\053\uffc1\054\uffc1\062\uffc1\001\002\000\042\005\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\053\uffb6\054" +
    "\uffb6\062\uffb6\001\002\000\042\005\uffc0\020\uffc0\021\115" +
    "\022\112\040\106\041\117\042\110\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\053\uffc0\054\uffc0\062\uffc0" +
    "\001\002\000\042\005\uffb9\020\uffb9\021\uffb9\022\112\040" +
    "\uffb9\041\117\042\110\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\053\uffb9\054\uffb9\062\uffb9\001\002\000" +
    "\042\005\uffb5\020\uffb5\021\uffb5\022\112\040\uffb5\041\117" +
    "\042\110\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\053\uffb5\054\uffb5\062\uffb5\001\002\000\020\007\ufff6" +
    "\030\ufff6\032\ufff6\033\ufff6\034\ufff6\037\ufff6\066\ufff6\001" +
    "\002\000\032\004\104\005\147\024\067\025\077\026\103" +
    "\040\076\055\066\063\102\064\064\066\070\067\073\070" +
    "\071\001\002\000\040\005\150\021\115\022\112\040\106" +
    "\041\117\042\110\043\121\044\107\045\113\046\122\047" +
    "\116\050\111\053\124\054\114\062\120\001\002\000\044" +
    "\005\uffab\020\uffab\021\uffab\022\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\053\uffab\054\uffab\056\uffab\062\uffab\001\002\000\044\005" +
    "\uffac\020\uffac\021\uffac\022\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\053" +
    "\uffac\054\uffac\056\uffac\062\uffac\001\002\000\042\005\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\053\uffbb" +
    "\054\uffbb\062\uffbb\001\002\000\020\007\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\037\ufff7\066\ufff7\001\002\000\040" +
    "\020\154\021\115\022\112\040\106\041\117\042\110\043" +
    "\121\044\107\045\113\046\122\047\116\050\111\053\124" +
    "\054\114\062\120\001\002\000\020\007\ufff8\030\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\037\ufff8\066\ufff8\001\002\000\004" +
    "\051\156\001\002\000\006\010\160\066\157\001\002\000" +
    "\004\006\040\001\002\000\016\024\067\025\077\063\167" +
    "\064\173\067\165\070\162\001\002\000\006\011\uffe9\062" +
    "\206\001\002\000\006\011\uffe0\062\uffe0\001\002\000\004" +
    "\011\204\001\002\000\006\011\uffea\062\202\001\002\000" +
    "\006\011\uffde\062\uffde\001\002\000\006\011\uffe7\062\200" +
    "\001\002\000\006\011\uffe2\062\uffe2\001\002\000\006\011" +
    "\uffe8\062\176\001\002\000\006\011\uffeb\062\174\001\002" +
    "\000\006\011\uffdc\062\uffdc\001\002\000\006\011\uffe4\062" +
    "\uffe4\001\002\000\004\064\175\001\002\000\006\011\uffe3" +
    "\062\uffe3\001\002\000\004\067\177\001\002\000\006\011" +
    "\uffdd\062\uffdd\001\002\000\006\024\067\025\077\001\002" +
    "\000\006\011\uffdb\062\uffdb\001\002\000\004\063\203\001" +
    "\002\000\006\011\uffe1\062\uffe1\001\002\000\004\006\040" +
    "\001\002\000\020\007\uffec\030\uffec\032\uffec\033\uffec\034" +
    "\uffec\037\uffec\066\uffec\001\002\000\004\070\207\001\002" +
    "\000\006\011\uffdf\062\uffdf\001\002\000\020\007\uffed\030" +
    "\uffed\032\uffed\033\uffed\034\uffed\037\uffed\066\uffed\001\002" +
    "\000\022\012\031\013\027\014\035\015\030\016\033\017" +
    "\036\027\214\065\215\001\002\000\012\005\uffd5\006\uffd5" +
    "\020\uffd5\062\uffd5\001\002\000\012\005\uffd4\006\uffd4\020" +
    "\uffd4\062\uffd4\001\002\000\004\006\222\001\002\000\004" +
    "\023\220\001\002\000\004\020\217\001\002\000\026\002" +
    "\uffda\007\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\066\uffda\001\002\000\022\012\031\013" +
    "\027\014\035\015\030\016\033\017\036\027\214\065\215" +
    "\001\002\000\012\005\uffd3\006\uffd3\020\uffd3\062\uffd3\001" +
    "\002\000\004\066\223\001\002\000\004\060\230\001\002" +
    "\000\006\007\uffd7\066\uffd7\001\002\000\006\007\226\066" +
    "\223\001\002\000\012\005\uffd6\006\uffd6\020\uffd6\062\uffd6" +
    "\001\002\000\006\007\uffd8\066\uffd8\001\002\000\022\012" +
    "\031\013\027\014\035\015\030\016\033\017\036\027\214" +
    "\065\215\001\002\000\004\020\232\001\002\000\006\007" +
    "\uffd9\066\uffd9\001\002\000\004\006\040\001\002\000\022" +
    "\007\ufffd\030\ufffd\031\235\032\ufffd\033\ufffd\034\ufffd\037" +
    "\ufffd\066\ufffd\001\002\000\004\006\040\001\002\000\020" +
    "\007\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\037\ufffc\066" +
    "\ufffc\001\002\000\020\007\000\030\000\032\000\033\000" +
    "\034\000\037\000\066\000\001\002\000\004\007\241\001" +
    "\002\000\030\002\uffef\007\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\066\uffef\001" +
    "\002\000\004\032\243\001\002\000\004\004\104\001\002" +
    "\000\020\007\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\037" +
    "\ufff9\066\ufff9\001\002\000\004\006\040\001\002\000\020" +
    "\007\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\037\ufffb\066" +
    "\ufffb\001\002\000\012\005\uffd2\006\uffd2\020\uffd2\062\uffd2" +
    "\001\002\000\004\060\264\001\002\000\006\005\uffa2\062" +
    "\uffa2\001\002\000\006\005\254\062\253\001\002\000\004" +
    "\066\250\001\002\000\004\060\255\001\002\000\022\012" +
    "\031\013\027\014\035\015\030\016\033\017\036\027\214" +
    "\065\215\001\002\000\004\006\uffa9\001\002\000\004\006" +
    "\260\001\002\000\016\030\051\032\044\033\054\034\045" +
    "\037\055\066\052\001\002\000\020\007\262\030\051\032" +
    "\044\033\054\034\045\037\055\066\052\001\002\000\014" +
    "\002\uffa8\007\uffa8\035\uffa8\036\uffa8\066\uffa8\001\002\000" +
    "\006\005\uffa1\062\uffa1\001\002\000\022\012\031\013\027" +
    "\014\035\015\030\016\033\017\036\027\214\065\215\001" +
    "\002\000\006\005\uffa0\062\uffa0\001\002\000\014\002\uff98" +
    "\007\uff98\035\uff98\036\uff98\066\uff98\001\002\000\004\066" +
    "\270\001\002\000\004\004\271\001\002\000\006\005\272" +
    "\066\uffa6\001\002\000\004\006\040\001\002\000\004\066" +
    "\250\001\002\000\006\005\275\062\253\001\002\000\004" +
    "\006\uffa5\001\002\000\004\006\277\001\002\000\016\030" +
    "\051\032\044\033\054\034\045\037\055\066\052\001\002" +
    "\000\020\007\301\030\051\032\044\033\054\034\045\037" +
    "\055\066\052\001\002\000\014\002\uffa4\007\uffa4\035\uffa4" +
    "\036\uffa4\066\uffa4\001\002\000\014\002\uffa3\007\uffa3\035" +
    "\uffa3\036\uffa3\066\uffa3\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\010\002\004\025\006\026\003\001\001\000" +
    "\010\045\014\054\016\055\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\011\001\001\000\010\045\014\054\016\055\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\265\001\001\000\004\024\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\023\001\001\000\006\022\250\023\251\001\001" +
    "\000\002\001\001\000\006\014\033\017\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\211\015\212" +
    "\016\246\017\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\041\001\001\000" +
    "\002\001\001\000\016\012\047\040\055\041\052\042\042" +
    "\044\046\045\045\001\001\000\002\001\001\000\004\036" +
    "\244\001\001\000\004\043\241\001\001\000\002\001\001" +
    "\000\016\012\047\040\055\041\052\042\236\045\045\047" +
    "\237\001\001\000\002\001\001\000\004\036\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\061\030\062\031\060\032\152\033\074\034\064" +
    "\035\100\036\071\040\077\041\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\027\061\030\062\031\060" +
    "\032\073\033\074\034\064\035\100\036\071\040\077\041" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\061\030\062\031\060\032\150\033\074\034\064\035\100" +
    "\036\071\040\077\041\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\027" +
    "\061\030\062\031\060\032\142\033\074\034\064\035\100" +
    "\036\071\040\077\041\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\061\030\062\031\060\032\104\033" +
    "\074\034\064\035\100\036\071\040\077\041\052\001\001" +
    "\000\002\001\001\000\026\027\061\030\062\031\060\032" +
    "\141\033\074\034\064\035\100\036\071\040\077\041\052" +
    "\001\001\000\026\027\061\030\062\031\060\032\140\033" +
    "\074\034\064\035\100\036\071\040\077\041\052\001\001" +
    "\000\026\027\061\030\062\031\060\032\137\033\074\034" +
    "\064\035\100\036\071\040\077\041\052\001\001\000\026" +
    "\027\061\030\062\031\060\032\136\033\074\034\064\035" +
    "\100\036\071\040\077\041\052\001\001\000\026\027\061" +
    "\030\062\031\060\032\135\033\074\034\064\035\100\036" +
    "\071\040\077\041\052\001\001\000\026\027\061\030\062" +
    "\031\060\032\134\033\074\034\064\035\100\036\071\040" +
    "\077\041\052\001\001\000\026\027\061\030\062\031\060" +
    "\032\133\033\074\034\064\035\100\036\071\040\077\041" +
    "\052\001\001\000\026\027\061\030\062\031\060\032\132" +
    "\033\074\034\064\035\100\036\071\040\077\041\052\001" +
    "\001\000\026\027\061\030\062\031\060\032\131\033\074" +
    "\034\064\035\100\036\071\040\077\041\052\001\001\000" +
    "\026\027\061\030\062\031\060\032\130\033\074\034\064" +
    "\035\100\036\071\040\077\041\052\001\001\000\026\027" +
    "\061\030\062\031\060\032\127\033\074\034\064\035\100" +
    "\036\071\040\077\041\052\001\001\000\026\027\061\030" +
    "\062\031\060\032\126\033\074\034\064\035\100\036\071" +
    "\040\077\041\052\001\001\000\026\027\061\030\062\031" +
    "\060\032\125\033\074\034\064\035\100\036\071\040\077" +
    "\041\052\001\001\000\002\001\001\000\026\027\061\030" +
    "\062\031\060\032\124\033\074\034\064\035\100\036\071" +
    "\040\077\041\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\027\061\030\062\031\060" +
    "\032\145\033\074\034\064\035\100\036\071\040\077\041" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\207\001\001\000\020\003\162\004\165\005" +
    "\170\006\163\011\167\013\160\035\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\211\015\212" +
    "\016\215\017\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\211\015\212\016\220\017" +
    "\031\001\001\000\002\001\001\000\006\020\223\021\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\211\015\212\016\230\017\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\233\001\001\000\002" +
    "\001\001\000\004\043\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\243\001\001\000\002\001\001\000" +
    "\004\043\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\262\001\001\000\002\001\001\000\012\014\211" +
    "\015\212\016\255\017\031\001\001\000\004\051\256\001" +
    "\001\000\002\001\001\000\016\012\047\040\055\041\052" +
    "\042\042\044\260\045\045\001\001\000\014\012\047\040" +
    "\055\041\052\042\236\045\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\211\015\212\016\264\017" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\272\001\001\000" +
    "\004\043\301\001\001\000\006\022\250\023\273\001\001" +
    "\000\002\001\001\000\004\053\275\001\001\000\002\001" +
    "\001\000\016\012\047\040\055\041\052\042\042\044\277" +
    "\045\045\001\001\000\014\012\047\040\055\041\052\042" +
    "\236\045\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



		
		public void syntax_error(Symbol cur_token){
			int line = cur_token.left+1;
			int column = cur_token.right+1;
			
			System.err.print("Syntax error at line "+line+", column "+column+", ");
			if(cur_token.value != null){
				System.err.println("before the character or keyword : " +cur_token.value);
			}
		}
		
		public void report_fatal_error(String s, Object o) { }
	
		public void print_variable_error(String s) {
			System.err.println(s);
		}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


		
		Table table = new Table();	
		Table funcTable = new Table();
		HashMap<String,List<Type>> func_map = new HashMap<String,List<Type>>();
		
		public void add_function(String s, Type t) {
			List<Type> list = func_map.get(s);
			if (list == null) {
				List<Type> tmp = new ArrayList<Type>();
				tmp.add(t);
				func_map.put(s,tmp);
			}
			else 
				list.add(t);			
		}
		
		public List<Type> get_list(String s) {
			List<Type> list = func_map.get(s);
			return list;
		}
			
		public Type find_function(Type type, List<Type> list) {
			if (type == null) {
				for (Type t : list) {							 
					if (t.getRight() == null) {
						return (Type) t.getLeft();
					}
				}		
			}
			else {
				for (Type t : list) {							 
					if (type.isDiff(t.getRight()) == true){
						return (Type) t.getLeft();
					}	
				}
			}
			return null;
		}	
						
		public Type expressionToType(Expression e) {
			Type res = null;
			if (e instanceof IDExpression) {
				IDExpression ide = (IDExpression) e;
				res = table.get(ide.getNameVar());
			}
			if (e instanceof IntegerExpression) {
				res = new IntType();
			}
			if (e instanceof TrueExpression || e instanceof FalseExpression) {
				res = new BooleanType();
			}
			if (e instanceof CharExpression) {
				res = new CharType();
			}
			if (e instanceof FloatExpression) {
				res = new FloatType();
			}
			if (e instanceof StringExpression) {
				res = new StringType();
			}
			if (e instanceof SuccExpression) {
				res = new ProdType(expressionToType(e.getLeft()),expressionToType(e.getRight()));
			}
			return res;	
		}
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // axiom ::= axiom simple_declaration 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("axiom",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // axiom ::= axiom NT$7 procedure_definition 
            {
              Type RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("axiom",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$7 ::= 
            {
              Type RESULT =null;
 funcTable.push(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // axiom ::= axiom NT$6 function_definition 
            {
              Type RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type f = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 f.toDot("funcType2.dot");RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("axiom",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$6 ::= 
            {
              Type RESULT =null;
 funcTable.push(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // axiom ::= 
            {
              Type RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("axiom",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // translation_unit ::= axiom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // translation_unit ::= class_definition 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 c.toDot("class.dot"); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translation_unit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class_definition ::= CLASS ID LACC axiom RACC 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassType(new NameType(id), a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_definition",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arg ::= ID COLON type_specifier 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
										RESULT = new NameType(id);
										//RESULT = t;
										table.add(id,t); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arg_list ::= arg_list COMMA arg 
            {
              Type RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type al = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProdType(al,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arg_list ::= arg 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // procedure_definition ::= PROCEDURE ID LPAR RPAR instr_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_definition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // procedure_definition ::= PROCEDURE ID LPAR NT$4 arg_list RPAR NT$5 LACC instructions RACC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 table.pop(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_definition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

										FuncType tmp = new FuncType(null,a);
										add_function(id,tmp);
										RESULT = tmp;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.push(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_definition ::= FCT ID LPAR RPAR COLON simple_type_specifier instr_block 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
										FuncType tmp = new FuncType(t,null);
										tmp.toDot("funcType.dot");
										add_function(id,tmp);
										RESULT = tmp;	
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_definition ::= FCT ID LPAR NT$2 arg_list RPAR COLON type_specifier NT$3 LACC instructions RACC 
            {
              Type RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
			table.pop(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_definition",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$3 ::= 
            {
              Type RESULT =(Type) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

										FuncType tmp = new FuncType(t,a);
									  	add_function(id,tmp);
									    RESULT = tmp;		
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$2 ::= 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 table.push(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // func_call ::= ID LPAR RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
										List<Type> tmp = func_map.get(id);
										if (tmp == null)
											System.err.println("Function doesn't exist");
										else {
											Type t2 = find_function(null,tmp);	
											if (t2 == null) {
												System.err.println("No matching function làbas");
											}
											else {
												FuncCallExpression fce = new FuncCallExpression(null,t2);
												RESULT = fce;
											}
										}		
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // func_call ::= ID LPAR expression RPAR 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
										List<Type> tmp = func_map.get(id);
										if (tmp == null)
											System.err.println("Function doesn't exist");
										else {
											Type t = expressionToType(e);
											Type t2 = find_function(t,tmp);	
											if (t2 == null) {
												System.err.println("No matching function ici");
											}
											else {
												FuncCallExpression fce = new FuncCallExpression(e,t2);
												RESULT = fce;
											}
										}
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_call",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary_expression ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									StringExpression ss = new StringExpression(s);
									System.out.println(ss.getValue()); 
									RESULT = new StringExpression(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // primary_expression ::= LETTER 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
									RESULT = new CharExpression(l);
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // primary_expression ::= REAL 
            {
              Expression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatExpression(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // primary_expression ::= NB 
            {
              Expression RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer nb = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerExpression(nb); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constant ::= NULL 
            {
              Expression RESULT =null;
		 RESULT = new NullExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // constant ::= boolean 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolean ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new FalseExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolean ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new TrueExpression(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arithmetic_expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryMinusExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arithmetic_expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ModExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithmetic_expression ::= expression MULT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arithmetic_expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithmetic_expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arithmetic_expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AddExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical_expression ::= NOT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotExpression(e,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical_expression ::= expression AND_OP expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndExpression(e1,e2, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logical_expression ::= expression OR_OP expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 OrExpression or_expr = new OrExpression(e1,e2,null); 
									   //or_expr.toDot("dotFiles/orExpr.dot");
									   RESULT =  or_expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expression",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comparison_expression ::= expression DIFF expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DiffExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comparison_expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new EqExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comparison_expression ::= expression GREAT expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreatExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comparison_expression ::= expression GE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GEExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comparison_expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comparison_expression ::= expression LE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LEExpression(e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison_expression",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression COMMA expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 SuccExpression e = new SuccExpression(e1,e2); 
									   RESULT = e;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= constant 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= primary_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= var 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= cond 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= arithmetic_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= comparison_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_type_specifier ::= pointer_type 
            {
              Type RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type p = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_type_specifier ::= STRING 
            {
              Type RESULT =null;
		 RESULT = new StringType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_type_specifier ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_type_specifier ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new FloatType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_type_specifier ::= INTEGER 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_type_specifier ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new CharType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type_specifier",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pointer_type ::= CHAPEAU type_specifier 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PointerType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier ::= LIST OF type_specifier 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ListType(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_specifier ::= struct_specifier 
            {
              Type RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type ss = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier ::= simple_type_specifier 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struct_specifier ::= STRUCT LACC struct_membs RACC 
            {
              Type RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StructType(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_specifier",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // struct_membs ::= struct_memb 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_membs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // struct_membs ::= struct_membs struct_memb 
            {
              Type RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ProdType(d,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_membs",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // struct_memb ::= ID COLON type_specifier SEMIC 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProdType(new NameType(id),t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_memb",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_declaration ::= ID COLON type_specifier SEMIC 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DeclarationInstruction(new IDExpression(id),t );
									    table.add(id,t); 
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_declaration",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolean_list ::= boolean_list COMMA boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // boolean_list ::= boolean 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // string_list ::= string_list COMMA STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // string_list ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // char_list ::= char_list COMMA LETTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // char_list ::= LETTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // real_list ::= real_list COMMA REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // real_list ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // int_list ::= int_list COMMA NB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // int_list ::= NB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // id_list ::= id_list COMMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_list ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_assignment ::= boolean_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_assignment ::= string_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_assignment ::= char_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_assignment ::= real_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_assignment ::= int_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_assignment",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // foreach_instruction ::= FOREACH ID IN LCRO list_assignment RCRO instr_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("foreach_instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // foreach_instruction ::= FOREACH ID IN ID instr_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("foreach_instruction",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr_block ::= LACC RACC 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_block",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr_block ::= LACC NT$0 instructions NT$1 RACC 
            {
              Instruction RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Instruction) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 table.pop(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr_block",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Instruction RESULT =(Instruction) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Instruction RESULT =null;
 table.push(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= func_call 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Type t = table.get(id);
									   if (t == null)	
									   		System.err.println("Variable " + id + " has not been declared !");	
									   
									RESULT = new IDExpression(id); 
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= simple_declaration 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= var SEMIC 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= var AFF expression SEMIC 
            {
              Instruction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
										Type tmp = expressionToType(e);
										if (v instanceof IDExpression) {
											IDExpression ide = (IDExpression) v;
											Type t1 = table.get(ide.getNameVar());					
											if (t1 != null) {
												if (e instanceof FuncCallExpression) {
													FuncCallExpression fce = (FuncCallExpression) e;
													Type ret = fce.getType();
													if (ret.isDiff(t1) == false) 
														System.err.println("Bad assignment");
												}
												else {
													TypeDiff dif = t1.diff(tmp);
													if (dif != null) {
														System.err.println("Bad assignment : got " 
														+ dif.getRight().toString() + ", expected : " 
														+ dif.getLeft().toString());
													}
												}	
											}
										}
										AssignmentInstruction as = new AssignmentInstruction(v,e);
										as.toDot("orExpr.dot");
										RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= RETURN SEMIC 
            {
              Instruction RESULT =null;
		 RESULT = new ReturnInstruction(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= RETURN expression SEMIC 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= REPEAT instr_block WHILE cond 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RepeatInstruction res = new RepeatInstruction(i,c); System.out.println(res.toString()); RESULT = new RepeatInstruction(i,c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= foreach_instruction 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= WHILE cond instr_block 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= IF cond instr_block ELSE instr_block 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction i1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfInstruction(c,new IfElseInstruction(i1,i2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= IF cond instr_block 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfInstruction(c,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cond ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instruction 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Instruction(i, null, EnumTag.INSTRUCTION); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= instructions instruction 
            {
              Instruction RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction i1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Instruction in = new Instruction(i1,i2, EnumTag.INSTRUCTION);
										in.toDot("inExpr.dot");
										RESULT = in;
										
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

